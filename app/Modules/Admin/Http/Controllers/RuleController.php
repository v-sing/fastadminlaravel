<?php
/**
 * Created by PhpStorm.
 * User: zhoulongtao
 * Date: 2020-10-03
 * Time: 11:46
 */

namespace App\Modules\Admin\Http\Controllers;


use App\Modules\Common\Controllers\BackendController;
use App\Modules\Common\Library\Tree;
use App\Modules\Model\AuthRule;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;

class RuleController extends BackendController
{
    protected $rulelist = [];
    protected $multiFields = 'ismenu,status';


    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->model = new AuthRule();
        // 必须将结果集转换为数组
        $ruleList = $this->model->orderBy('weigh', 'desc')->orderBy('id', 'asc')->get()->toArray();
        foreach ($ruleList as $k => &$v) {
            $v['title']  = lang($v['title']);
            $v['remark'] = lang($v['remark']);
        }
        unset($v);
        Tree::instance()->init($ruleList);
        $this->rulelist = Tree::instance()->getTreeList(Tree::instance()->getTreeArray(0), 'title');
        $ruledata       = [0 => __('None')];
        foreach ($this->rulelist as $k => &$v) {
            if (!$v['ismenu']) {
                continue;
            }
            $ruledata[$v['id']] = $v['title'];
        }
        unset($v);
        $this->assign('ruledata', $ruledata);

    }

    public function index(Request $request)
    {
        if ($request->isAjax()) {
            $list   = $this->rulelist;
            $total  = count($this->rulelist);
            $result = array("total" => $total, "rows" => $list);
            $this->json($result);
        }
        return $this->view();
    }

    public function add(Request $request)
    {
        if ($request->isMethod('post')) {
            $params = $request->post("row", []);
            if ($params) {
                if (!$params['ismenu'] && !$params['pid']) {
                    $this->error(lang('The non-menu rule must have parent'));
                }
                $this->Validator($params, [
                    'name'  => 'required|format|unique:AuthRule',
                    'title' => 'required',
                ],
                    ['name.format' => 'URL规则只能是小写字母、数字、下划线和/组成']
                );
                $result = $this->model->insert($params);
                if ($result === false) {
                    $this->error();
                }
                Cache::forget('__menu__');
                $this->success();
            }
            $this->error();
        }
        return $this->view();
    }

    public function edit(Request $request)
    {
        $row = $this->model->get(['id' => $ids]);
        if (!$row) {
            $this->error(__('No Results were found'));
        }
        if ($this->request->isPost()) {
            $params = $this->request->post("row/a", [], 'strip_tags');
            if ($params) {
                if (!$params['ismenu'] && !$params['pid']) {
                    $this->error(__('The non-menu rule must have parent'));
                }
                if ($params['pid'] != $row['pid']) {
                    $childrenIds = Tree::instance()->init(collection(AuthRule::select())->toArray())->getChildrenIds($row['id']);
                    if (in_array($params['pid'], $childrenIds)) {
                        $this->error(__('Can not change the parent to child'));
                    }
                }
                //这里需要针对name做唯一验证
                $ruleValidate = \think\Loader::validate('AuthRule');
                $ruleValidate->rule([
                    'name' => 'require|format|unique:AuthRule,name,' . $row->id,
                ]);
                $result = $row->validate()->save($params);
                if ($result === false) {
                    $this->error($row->getError());
                }
                Cache::rm('__menu__');
                $this->success();
            }
            $this->error();
        }
        $this->view->assign("row", $row);
        return $this->view->fetch();
    }

    public function del(Request $request)
    {

    }

    public function multi(Request $request)
    {


    }
}